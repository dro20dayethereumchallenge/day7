sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install nodejs -y
npm install web3
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
   
mkdir firstPayable
cd firstPayable
npx hardhat init
cd contract


ubuntu@ip-172-31-27-33:~/firstPayable$ cd contracts
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ ls
Lock.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ rm Lock.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ vi ExamplePayableContract.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$


pragma solidity ^0.8.0;

contract ExamplePayableContract {
    event FundsReceived(address indexed sender, uint amount);
    event FundsWithdrawn(address indexed recipient, uint amount);

    function receiveFunds() external payable {
        emit FundsReceived(msg.sender, msg.value);
    }

    function withdrawFunds(address payable recipient, uint amount) external {
        require(amount <= address(this).balance, "Insufficient balance");
        recipient.transfer(amount);
        emit FundsWithdrawn(recipient, amount);
    }
}


npx hardhat node --hostname localhost    # make sure to run as localhost vs the dns


npx hardhat console --network localhost



ubuntu@ip-172-31-27-83:~/payable$
npx hardhat console --network localhost
Welcome to Node.js v22.10.0.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("ExamplePayableContract")
undefined
> const cd = await contract.deploy()
undefined
> const [deployer] = await ethers.getSigners();
undefined
> await ethers.provider.getBalance(cd.target)
0n
>  cd.receiveFunds({value: ethers.parseEther("0.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 4189,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
500000000000000000n
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
> await  cd.receiveFunds({ from: signers[2].addresss ,value: ethers.parseEther("0.5")})
// brackets as you are sending direct parameters  ( not send )  ... no from. value etc.
> await  cd.withdrawFunds( signers[1].address, ethers.parseEther("0.5"))
> await  cd.withdrawFunds( signers[1].address, ethers.parseEther("0.5"))
> await ethers.provider.getBalance(signers[2])
> assert.equal((ethers.parseEther("1.0")), bal1, "not equal ")

>  await ethers.provider.getBalance(signers[0])
>  await ethers.provider.getBalance(signers[1])






errors: 
>  await  cd.withdrawFunds({from: signers[3], value: ethers.parseEther("0.5")})
Uncaught:
Error: no matching fragment (operation="fragment", info={ "args": [ { "from": "<SignerWithAddress 0x90F79bf6EB2c4f870365E785982E1f101E93b906>", "value": 500000000000000000 } ], "key": "withdrawFunds" }, code=UNSUPPORTED_OPERATION, version=6.13.4)
    at makeError (/home/ubuntu/firstPayable/node_modules/ethers/src.ts/utils/errors.ts:694:21)
    at assert (/home/ubuntu/firstPayable/node_modules/ethers/src.ts/utils/errors.ts:715:25)
    at getFragment (/home/ubuntu/firstPayable/node_modules/ethers/src.ts/contract/contract.ts:270:15)
    at Proxy.withdrawFunds (/home/ubuntu/firstPayable/node_modules/ethers/src.ts/contract/contract.ts:350:26)
    at REPL17:1:44 {
  code: 'UNSUPPORTED_OPERATION',
  operation: 'fragment',
  info: { key: 'withdrawFunds', args: [ [Object] ] },
  shortMessage: 'no matching fragment'



ref:
https://ethereum.stackexchange.com/questions/97765/how-to-console-log-output-in-hardhat-test
