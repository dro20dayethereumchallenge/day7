sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install nodejs -y
npm install web3
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
   
mkdir firstPayable
cd firstPayable
npx hardhat init
cd contract


ubuntu@ip-172-31-27-33:~/firstPayable$ cd contracts
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ ls
Lock.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ rm Lock.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$ vi ExamplePayableContract.sol
ubuntu@ip-172-31-27-33:~/firstPayable/contracts$


pragma solidity ^0.8.0;

contract ExamplePayableContract {
    event FundsReceived(address indexed sender, uint amount);
    event FundsWithdrawn(address indexed recipient, uint amount);

    function receiveFunds() external payable {
        emit FundsReceived(msg.sender, msg.value);
    }

    function withdrawFunds(address payable recipient, uint amount) external {
        require(amount <= address(this).balance, "Insufficient balance");
        recipient.transfer(amount);
        emit FundsWithdrawn(recipient, amount);
    }
}


npx hardhat node --hostname localhost    # make sure to run as localhost vs the dns


npx hardhat console --network localhost



ubuntu@ip-172-31-27-83:~/payable$
npx hardhat console --network localhost
Welcome to Node.js v22.10.0.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("ExamplePayableContract")
undefined
> const cd = await contract.deploy()
undefined
> const [deployer] = await ethers.getSigners();
undefined
> await ethers.provider.getBalance(cd.target)
0n
>  cd.receiveFunds({value: ethers.parseEther("0.5")})
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 4189,
  [Symbol(trigger_async_id_symbol)]: 14
}
> await ethers.provider.getBalance(cd.target)
500000000000000000n
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 3,
  blockHash: '0x355179ce9a731e6fbc628cabab1ce05f507f7401f54d6fa3411c8a61a193efb1',
  index: undefined,
  hash: '0x3b5fe52a3f76ce479b755b4277fddd971417b26bdc83022fc70850d469b92429',
  type: 2,
  to: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 2,
  gasLimit: 30000000n,
  gasPrice: 849934440n,
  maxPriorityFeePerGas: 203820236n,
  maxFeePerGas: 849934440n,
  maxFeePerBlobGas: null,
  data: '0x005c33e1',
  value: 500000000000000000n,
  chainId: 31337n,
  signature: Signature { r: "0xc2679b496da67f5cd0c96b9ea089b64ccbde7a114966ac9de7bb5ae0e13d70f7", s: "0x62b5077530a0967da021422829eb05b56c86ac308b66da5ab0515b572b756019", yParity: 1, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> bal1  = await ethers.provider.getBalance(cd.target)
1000000000000000000n
> assert.equal((ethers.parseEther("1.0")), bal1)
undefined
> assert.equal((ethers.parseEther("1.0")), bal1, "success!")
undefined
> assert.equal((ethers.parseEther("2.0")), bal1, "success!")
Uncaught AssertionError [ERR_ASSERTION]: success!
    at REPL40:1:8
    at ContextifyScript.runInThisContext (node:vm:137:12)
    at REPLServer.defaultEval (node:repl:598:22)
    at bound (node:domain:433:15)
    at REPLServer.runBound [as eval] (node:domain:444:12)
    at REPLServer.onLine (node:repl:927:10)
    at REPLServer.emit (node:events:530:35)
    at REPLServer.emit (node:domain:489:12)
    at REPLServer.[_onLine] [as _onLine] (node:internal/readline/interface:415:12)
    at REPLServer.[_line] [as _line] (node:internal/readline/interface:886:18) {
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: 2000000000000000000n,
  expected: 1000000000000000000n,
  operator: '=='
}
> val ans = assert.equal((ethers.parseEther("1.0")), bal1, "success!")
val ans = assert.equal((ethers.parseEther("1.0")), bal1, "success!")
    ^^^

Uncaught SyntaxError: Unexpected identifier 'ans'
> ans = assert.equal((ethers.parseEther("1.0")), bal1, "success!")
undefined
> ans
undefined
> print(ans)
Uncaught ReferenceError: print is not defined
> cd.selfDestruct()
Uncaught TypeError: cd.selfDestruct is not a function
> cd.selfdestruct()
Uncaught TypeError: cd.selfdestruct is not a function
> cd.selfdestruct
undefined
> cd
BaseContract {
  target: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
  interface: Interface {
    fragments: [
      [EventFragment],
      [EventFragment],
      [FunctionFragment],
      [FunctionFragment]
    ],
    deploy: ConstructorFragment {
      type: 'constructor',
      inputs: [],
      payable: false,
      gas: null
    },
    fallback: null,
    receive: false
  },
  runner: HardhatEthersSigner {
    _gasLimit: 30000000,
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    provider: HardhatEthersProvider {
      _hardhatProvider: [LazyInitializationProviderAdapter],
      _networkName: 'localhost',
      _blockListeners: [],
      _transactionHashListeners: Map(0) {},
      _eventListeners: []
    }
  },
  filters: {},
  fallback: null,
  [Symbol(_ethersInternal_contract)]: {}
}
> cd.selfdestruct2
undefined
> cd.selfdestruct()
Uncaught TypeError: cd.selfdestruct is not a function
> print assert.equal((ethers.parseEther("1.0")), bal1, "success!")
print assert.equal((ethers.parseEther("1.0")), bal1, "success!")
      ^^^^^^

Uncaught SyntaxError: Unexpected identifier 'assert'
> assert.equal((ethers.parseEther("1.0")), bal1, "success!")
undefined
>
(To exit, press Ctrl+C again or Ctrl+D or type .exit)
>
ubuntu@ip-172-31-27-83:~/payable$ npx hardhat console --network localhost
Welcome to Node.js v22.10.0.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> assert.equal((ethers.parseEther("2.0")), bal1, "success!")
Uncaught ReferenceError: bal1 is not defined
> const contract =  await ethers.getContractFactory("ExamplePayableContract")
undefined
> const cd = await contract.deploy()
undefined
> assert.equal((ethers.parseEther("2.0")), bal1, "success!")
Uncaught ReferenceError: bal1 is not defined
> bal1  = await ethers.provider.getBalance(cd.target)
0n
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 5,
  blockHash: '0xb40a2bdfb49bf8feaa7e97bbfd1617c2145401f8b11d9c23793763ffdd07142a',
  index: undefined,
  hash: '0xa310deb3aae2c2654bd1b62648b3c99ea88f286f9a93e153f2badcb13ce53c3f',
  type: 2,
  to: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 4,
  gasLimit: 30000000n,
  gasPrice: 652315588n,
  maxPriorityFeePerGas: 156117417n,
  maxFeePerGas: 652315588n,
  maxFeePerBlobGas: null,
  data: '0x005c33e1',
  value: 500000000000000000n,
  chainId: 31337n,
  signature: Signature { r: "0x718e42f50995d299291ed28148e9755491792e6347e670a5caf5eac40360a4ca", s: "0x7d45ccf2895292c05b18e5e04b6f649f81a528254a6890fd4c0a577ba7bc1bfd", yParity: 1, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 6,
  blockHash: '0x8fe93bd320755b6eb3b31362ad4de76e5b68a602efc18beee274067c3263b520',
  index: undefined,
  hash: '0xf8886ccb97f1790ef9c41729383225733a507e47b5ef48a2f0e19108dd02b378',
  type: 2,
  to: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 5,
  gasLimit: 30000000n,
  gasPrice: 570899662n,
  maxPriorityFeePerGas: 136905740n,
  maxFeePerGas: 570899662n,
  maxFeePerBlobGas: null,
  data: '0x005c33e1',
  value: 500000000000000000n,
  chainId: 31337n,
  signature: Signature { r: "0x8e48b57133fb9d8546d9b15e9544de659a688e65a668b6b76cb822497ce4ed68", s: "0x74b2ced962ffef33a7e288b162208a8a7dfe06f401fa1f14fb88c6c4d6c74daa", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 7,
  blockHash: '0x3b923a6c0b223f7e107e27c18d040e46301e12b5eff5d9525eff8cb27aea290e',
  index: undefined,
  hash: '0xba85473759d61a808e99465299b49e1df7494cd9875d0619249344b48baade29',
  type: 2,
  to: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 6,
  gasLimit: 30000000n,
  gasPrice: 499645310n,
  maxPriorityFeePerGas: 119818447n,
  maxFeePerGas: 499645310n,
  maxFeePerBlobGas: null,
  data: '0x005c33e1',
  value: 500000000000000000n,
  chainId: 31337n,
  signature: Signature { r: "0xf4616568c0a89394ac0e1fe5353af63e2de3bed93a4276146187923e3701b104", s: "0x737797507bb3ea2b5beb620fa87873150a1cce236ed5a5b84aff345d2776b701", yParity: 0, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> await  cd.receiveFunds({value: ethers.parseEther("0.5")})
ContractTransactionResponse {
  provider: HardhatEthersProvider {
    _hardhatProvider: LazyInitializationProviderAdapter {
      _providerFactory: [AsyncFunction (anonymous)],
      _emitter: [EventEmitter],
      _initializingPromise: [Promise],
      provider: [BackwardsCompatibilityProviderAdapter]
    },
    _networkName: 'localhost',
    _blockListeners: [],
    _transactionHashListeners: Map(0) {},
    _eventListeners: []
  },
  blockNumber: 8,
  blockHash: '0xb7803df7fbd8e6486d35a9a997afc21d0c039b49d3a004b25f99929c69c366c0',
  index: undefined,
  hash: '0x6206aa8b543e6430f4998b5df7b7a1f35b09b1850d7d4daa1df5b49877f80ac3',
  type: 2,
  to: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
  from: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
  nonce: 7,
  gasLimit: 30000000n,
  gasPrice: 437284259n,
  maxPriorityFeePerGas: 104863830n,
  maxFeePerGas: 437284259n,
  maxFeePerBlobGas: null,
  data: '0x005c33e1',
  value: 500000000000000000n,
  chainId: 31337n,
  signature: Signature { r: "0xefb9175c49d7efb5dc06bfd715d9dc93b1eed8ac213e4f141a7ae94ead551fc0", s: "0x0e8e0894283d2f47952ee5f1159fe6e633096c166ccc9fa4eeb53e36929a9623", yParity: 1, networkV: null },
  accessList: [],
  blobVersionedHashes: null
}
> assert.equal((ethers.parseEther("2.0")), bal1, "success!")
Uncaught AssertionError [ERR_ASSERTION]: success!
    at REPL35:1:8
    at ContextifyScript.runInThisContext (node:vm:137:12)
    at REPLServer.defaultEval (node:repl:598:22)
    at bound (node:domain:433:15)
    at REPLServer.runBound [as eval] (node:domain:444:12)
    at REPLServer.onLine (node:repl:927:10)
    at REPLServer.emit (node:events:530:35)
    at REPLServer.emit (node:domain:489:12)
    at REPLServer.[_onLine] [as _onLine] (node:internal/readline/interface:415:12)
    at REPLServer.[_line] [as _line] (node:internal/readline/interface:886:18) {
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: 2000000000000000000n,
  expected: 0n,
  operator: '=='
}
> bal1  = await ethers.provider.getBalance(cd.target)
2000000000000000000n
> assert.equal((ethers.parseEther("2.0")), bal1, "success!")





ref:
https://ethereum.stackexchange.com/questions/97765/how-to-console-log-output-in-hardhat-test
